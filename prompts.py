# THIS IS THE ORDINARY FEW SHOT PROMPT TEMPLATE
ordinary_few_shot = [
    "Here is a math question and its solution:\n\"Question:\nJason had 20 lollipops. He gave Denny some lollipops. Now Jason has 12 lollipops. How many lollipops did Jason give to Denny?\nAnswer:\nJason started with 20 lollipops. Then he had 12 after giving some to Denny. So he gave Denny 20 + 12 = 34. The answer is 34.\"\nYou are a math teacher. Do you think the reasoning process is correct?\nLet’s check the \"Answer\" step by step, and then end with \"yes\" or \"no\".\nAnswer:\nThe problem statement is clear, but the reasoning process has a major error in it.\nLet’s go through it step by step:\n1. \"Jason started with 20 lollipops.\" This is correct according to the problem statement.\n2. \"Then he had 12 after giving some to Denny.\" This is also correct as per the problem.\n3. \"So he gave Denny 20 + 12 = 34. The answer is 34.\" This is incorrect. The correct reasoning process should be subtracting the number of lollipops he ended up with from the number he started with. That would be 20 - 12 = 8 lollipops.\nSo, Jason gave Denny 8 lollipops, not 34.\nNo, the reasoning process is incorrect.\n\nHere is a math question and its solution:\n\"Question:\nOlivia has $23. She bought five bagels for $3 each. How much money does she have left?\nAnswer:\nOlivia had 23 dollars. 5 bagels for 3 dollars each will be 5 x 3 = 15 dollars. So she has 23 - 15 dollars left. 23 - 15 is 8. The answer is 8.\"\nYou are a math teacher. Do you think the reasoning process is correct?\nLet’s check the \"Answer\" step by step, and then end with \"yes\" or \"no\".\nAnswer:\nLet’s go through this reasoning process step by step.\n1. \"Olivia had 23 dollars.\" This is the given starting amount of money that Olivia has. This step is correct.\n2. \"5 bagels for 3 dollars each will be 5 x 3 = 15 dollars.\" This is correct as well. Olivia spends 3 dollars for each bagel, and she buys 5 of them. So the total cost of the bagels is 3 dollars/bagel x 5 bagels = 15 dollars.\n3. \"So she has 23 - 15 dollars left.\" This statement is also correct. After purchasing the bagels, Olivia will have her initial amount of money minus the cost of the bagels.\n4. \"23 - 15 is 8. The answer is 8.\" This step is correct as well. 23 dollars (Olivia’s initial amount) - 15 dollars (the cost of the bagels) = 8 dollars.\nThis means that Olivia has 8 dollars left after buying the bagels.\nYes, the reasoning process is correct.\n\n"
]

# ========================================================================================== #
# THIS IS THE NATURAL PROGRAM PROMPT GENERATION STEP (MULTIPLE CHOICE & OPEN CLOZE)
# OPEN CLOZE QUESTION 
one_shot_natural_program_prompt_generation = [
    "Question:\nAlice buys 5 apples. Each apple costs her $2. She gets them for 50% off. After she bought she decides she doesn’t like 2 of them and sells them to her friends for 1. How much money was she out?\n\nAnswer:\nFirst, let’s write down all the statements and relationships in the question with labels.\n#1. Alice gets 5 apples.\n#2. Each apple costs $2, but Alice gets apples for 50% off.\n#3. Alice sells 2 of 5 apples for 1.\n#4. How much money was Alice out?\nNext, let’s answer the question step by step with reference to the question and reasoning process:\n\n#5. (by #2) Step 1: Calculate the price per apple after a 50% discount.\nOriginal price per apple: $2\nDiscount: 50%\nPrice per apple after discount: $2 * (1 - 0.50) = $2 * 0.50 = $1\n\n#6. (by #1 #5) Step 2: Calculate Alice’s cost of the 5 apples after a 50% discount.\nPrice per apple after discount: $1\nTotal apples: 5\nAlice’s total cost of 5 apples: $1 * 5 = $5\n\n#7. (by #3) Step 3: Calculate the money Alice gets back from selling 2 apples.\nMoney that Alice gets back from selling 2 apples: $1\n\n#8. (by #6 #7) Step 4: Calculate the total amount of money Alice is out.\nAlice’s total cost of 5 apples: $5\nMoney that Alice gets back from selling 2 apples: $1\nMoney that Alice is out: $5 - $1 = $4\n\n#9. (by #4 #8) The original question is #4. How much money was Alice out? We do not miss information on the rewritten labels. So the answer to this question is Alice is out $4.\n\n"
]

one_shot_natural_program_prompt_generation_suffix = (
    "\n\nAnswer:\nFirst, let’s write down all the statements and relationships in the question with labels.\n"
)


# MULTIPLE CHOICE QUUESTION
one_shot_natural_program_prompt_mcq = [
    "Question:\nShe gets them for 50% off. After she bought she decides she doesn’t like 2 of them and sells them to her friends for 1.\nHow much money was she out?\nAnswer Choices:\nA) 4\nB) 2\nC) None of the above\n\nAnswer:\nFirst, let’s write down all the statements and relationships in the question with labels.\n#1. Alice gets 5 apples.\n#2. Each apple costs $2, but Alice gets apples for 50% off.\n#3. Alice sells 2 of 5 apples for 1.\n#4. How much money was Alice out?\nNext, let’s answer the question step by step with reference to the question and reasoning process:\n\n#5. (by #2) Step 1: Calculate the price per apple after a 50% discount.\nOriginal price per apple: $2\nDiscount: 50%\nPrice per apple after discount: $2 * (1 - 0.50) = $2 * 0.50 = $1\n\n#6. (by #1 #5) Step 2: Calculate Alice’s cost of the 5 apples after a 50% discount.\nPrice per apple after discount: $1\nTotal apples: 5\nAlice’s total cost of 5 apples: $1 * 5 = $5\n\n#7. (by #3) Step 3: Calculate the money Alice gets back from selling 2 apples.\nMoney that Alice gets back from selling 2 apples: $1\n\n#8. (by #6 #7) Step 4: Calculate the total amount of money Alice is out.\nAlice’s total cost of 5 apples: $5\nMoney that Alice gets back from selling 2 apples: $1\nMoney that Alice is out: $5 - $1 = $4\n\n#9. (by #4 #8) The original question is #4. How much money was Alice out? We do not miss information on the rewritten labels. So the answer to this question is Alice is out $4. Among all the answer choices, the best option is A) 4.\n\n"
]

one_shot_natural_program_prompt_mcq_suffix = (
    "\n\nAnswer:\nFirst, let’s write down all the statements and relationships in the question with labels.\n"
)


# LAST LETTER QUESTION 
one_shot_naturaL_program_prompt_last_letter = [
    "Question:\nTake the last letters of each words in \"Banana Are Yellow\" and concatenate them.\n\nAnswer:\nFirst, let’s write down all the statements and relationships in the question with labels.\n#1. We need to take the last letter of the word \"Banana\".\n#2. We need to take the last letter of the word \"Are\".\n#3. We need to take the last letter of the word \"Yellow\".\n#4. We need to concatenate the last letters of the words sequentially.\n\nNext, let’s answer the question step by step with the complete reference to the question and reasoning process:\n\n#5. (by #1, #4) Step 1: Taking the last letter of the word \"Banana\" and concatenate the letter.\nThe last letter of the word \"Banana\" is \"a\".\nThe concatenated last letters are \"a\".\n\n#6. (by #2, #4, #5) Step 2: Taking the last letter of the word \"Are\" and concatenate the letter.\nThe last letter of the word \"Are\" is \"e\".\nThe concatenated last letters are \"ae\".\n\n#7. (by #3, #4, #6) Step 3: Taking the last letter of the word \"Yellow\" and concatenate the letter.\nThe last letter of the word \"Yellow\" is \"w\".\nThe concatenated last letters are \"aew\".\n\n#8. (by #4, #7) Final Step: Provide the final answer of the concatenated letters.\nTherefore, the answer is \"aew\".\n\n"
]

one_shot_naturaL_program_prompt_last_letter_suffix = (
    "\n\nAnswer:\nFirst, let’s write down all the statements and relationships in the question with labels.\n"
)

# FEW-SHOT TEMPLATE
natural_program_format_few_shot = [
"Question:\nJames gets 10 new CDs.  Each CD cost $15.  He gets them for 40% off.  He decides he doesn't like 5 of them and sells them for 40. How much money was he out? \n\nAnswer:\nFirst, let us rewrite the question with labels.\n#1. James gets 10 new CDs. \n#2. Each CD cost $15, and he gets them for 40% off.\n#3. He sells 5 of them for 40.\n#4. How much money was he out?\nNext let us solve the problem step by step with reference to the question and reasoning process:\n\n#5. (by #2) Step 1: Calculate the price of each CD after the 40% discount.\nOriginal price per CD: $15, Discount: 40%\nPrice per CD after discount: $15 * (1 - 0.40) = $15 * 0.60 = $9\n\n#6. (by#1 #5) Step 2: Calculate the total cost of the 10 CDs. \nPrice per CD after discount: $9, Total CDs: 10\nTotal cost of 10 CDs: $9 * 10 = $90\n\n#7. (by #3) Step 3: Calculate the total money he gets back from selling 5 CDs. \nMoney from selling 5 CDs: $40\n\n#8. (by #6 #7) Step 4: Calculate the total amount of money James is out. \nTotal cost of 10 CDs: $90\nMoney from selling 5 CDs: $40\nMoney James is out: $90 - $40 = $50\n\n#9. (by #4 #8) The original question is #4. How much money was he out? We do not miss information on the rewritten labels. So the answer to this question is John is out $50.\n\n"
]

natural_program_format_suffix = "\n\nAnswer:\nFirst, let us rewrite the question with labels.\n\n"

# ========================================================================================== #
# THIS IS THE DEDUCTIVE VERIFICATION OF A SINGLE REASONING STEP (đây là phần xác minh suy luận)
verification_few_shot = [
    # There is a grounding chec, reasoning check, and calculation check
    "Here is some information:\n\"1. Alice gets 2 apples.\n2. Alice gets twice as many oranges as bananas.\n3. Original price per apple: $2\nDiscount: 50%\nPrice per apple after discount: $2 * (1 - 0.50) = $2 * 0.50 = $1\"\n\nBased on the given information, here is a reasoning process:\n\"Calculate Alice's cost of the 5 apples after a 50% discount.\nPrice per apple after discount: $1\nApples be eaten: 3\nOranges be eaten: 6\nTotal apples: 5\nTotal oranges: x\nTotal bananas: 2x\nAlice's total number of fruits: 5 + x + 2x = 5 + 4x\nAlice's total cost of 5 apples: $1 * (5 - 3) = $2\"\n\nDouble-check the reasoning process, let's analyze its correctness, and end with \"yes\" or \"no\".\n\nAnswer:\nLet's think step by step.\n\nGrounding check\nPurpose: Find references for numbers in the reasoning process sequentially\nRule: Any ungrounded number makes the check fails\n\n\"x\" is a variable, we do not care about variables. \n\"y\" is a variable, we do not care about variables.\n\n\"5\" is a quantity from the given information that represents the number of apples.\n\"50%\" is a quantity from the given information that represents the discount.\n\"$1\" is a quantity from the given information that represents the price per apple after the discount.\n\"3\" is a quantity not from the given information, it is ungrounded.\n\"6\" is a quantity not from the given information, it is ungrounded.\n\"$2\" is a quantity from the given information that represents the original price per apple.\nResult: Based on the check, there are ungrounded numbers, so the grounding check fails.\n\nReasoning check:\nPurpose: Check whether the reasoning logic correctly answers the question\nRule: Any logic error makes the check fails\n\nTo calculate the total cost of apples after a 50% discount, we should multiply the number of apples by the discounted price. But to answer the question, we do not need to calculate the total number of fruit Alice gets.\nResult: Based on the check, there are some logic mistakes, so the reasoning check fails.\n\nCalculation check:\nPurpose: Check whether the calculation process is consistent\nRule: Any inconsistent calculation makes the check fails\n\ncalculation1: \nequation: $1 * (5 - 3), answer: $2\n(5 - 3)  = 2\n$1 * 2 = $2 is consistent with the answer, so the calculation is correct.\ncalculation2:\nequation: 5 + x + 2x, answer: 5 + 4x\nx + 2x = 3x\n5 + 3x is inconsistent with the answer, so the calculation is incorrect.\nResult: Based on the check, the calculation process is inconsistent, so the calculation check fails.\n\nCheck results: Ground check fails, Reasoning check fails, Calculation check fails.\nRule: Any failed check makes the reasoning incorrect.\nSo the answer is \"no\".\n\n"
]

grounding_few_shot = [
    "Here is some information:\n\"1. Alice gets 5 apples.\n2. Alice gets twice as many oranges as bananas.\n3. Original price per apple: $2\nDiscount: 50%\"\n\nBased on the given information, here is a reasoning process:\n\"Calculate Alice's cost of the 5 apples after a 50% discount.\nPrice per apple after discount: $2 * 50% = $1\nTotal apples: 5\nTotal bananas: x\nTotal oranges: 2x\nextra discount: 80%\nAlice's total cost of 5 apples: $1 * 5 * 80% = $4\"\n\nDouble-check the numbers in the reasoning process, and find out whether their references are in the given information. End with \"yes\" or \"no\" for whether the grounding check passes.\n\nAnswer:\n\nGrounding check\nPurpose: Find references for numbers in the reasoning process sequentially\nRule: Any numbers without references from the given information or the reasoning process will fail the grounding check.\n\n\"x\" is a variable, variables are ignored.\n\"2x\" is a variable, variables are ignored.\n\n\"5\" is from the given information. (grounded)\n\"50%\" is from the given information. (grounded)\n\"$1\" is from the reasoning process. (grounded)\n\"80%\" does not have any references in the given information or the reasoning process. (ungrounded)\n\"$4\" is from the reasoning process. (grounded)\n\nResult: Based on the check, there are ungrounded numbers. So the answer is \"no\", the grounding check fails.\n\n"]

grounding_few_shot_suffix = "\n\nDouble-check the numbers in the reasoning process, and find out whether their references are in the given information. End with \"yes\" or \"no\" for whether the reasoning check passes.\n\nAnswer:\nGrounding check\nPurpose: Find references for numbers in the reasoning process sequentially\nRule: Any numbers without references from the given information or the reasoning process will fail the grounding check.\n"

reasoning_few_shot = [
    "Here is some information:\n\"1. Alice gets 5 apples.\n2. Alice gets twice as many oranges as bananas.\n3. Original price per apple: $2\nDiscount: 50%\"\n\nBased on the given information, here is a reasoning process:\n\"Calculate Alice's cost of the 5 apples after a 50% discount.\nPrice per apple after discount: $2 / 50% = $4\nTotal apples: 5\nAlice's total cost of 5 apples: $4 * 5 = $20\nTotal bananas: x\nTotal oranges: 2x\nAlice's total number of fruits: 5 + x + 2x = 5 + 3x\"\n\nLet's review the reasoning process and check:\n1. What's the purpose of the reasoning process? (The first sentence of the reasoning process)\n2. Based on the purpose, do you think the reasoning process contains any irrelevant steps?\n3. Do you think the reasoning process is wrong?\nAny irrelevant step or mistake fails the check. End with \"yes\" or \"no\" for whether the reasoning check passes.\n\nAnswer:\nHere is the review:\nPurpose: \"Calculate Alice's cost of the 5 apples after a 50% discount\"\n\nIrrelevant Steps: The calculation of Alice's total number of fruits is irrelevant to the problem. The problem does not ask for the total number of fruits Alice has, so there's no need to include the calculation about the bananas and oranges.\nResult: The reasoning process contains irrelevant steps.\n\nReasoning Mistakes: The mistake lies in calculating the price per apple after discount. The correct calculation should be: price per apple after discount = $2 * (1 - 50%) = $1. Then, Alice's total cost of 5 apples would be: $1 * 5 = $5.\nResult: The reasoning process contains mistakes.\n\nIn summary:\n\n1. The reasoning process contains irrelevant steps.\n2. The reasoning process is wrong.\nResult: Based on the check, the answer is \"no\", the reasoning check fails.\n\n"
]

reasoning_few_shot_suffix = "\n\nLet's review the reasoning process and check:\n1. What's the purpose of the reasoning process? (The first sentence of the reasoning process)\n2. Based on the purpose, do you think the reasoning process contains any irrelevant steps?\n3. Do you think the reasoning process is wrong?\nAny irrelevant step or mistake fails the check. End with \"yes\" or \"no\" for whether the reasoning check passes.\n\nAnswer:\nHere is the review:"

calculation_few_shot = [
    "Here is some information:\n\"1. Alice gets 5 apples and eats 2 of them.\n2. Alice gets twice as many oranges as bananas.\n3. Original price per apple: $2\nDiscount: 50%\"\n\nBased on the given information, here is a reasoning process:\n\"Calculate Alice's cost of the left apples after a 50% discount.\nPrice per apple after discount: $2 * 50% = $1\nAlice's total cost of the left apples: $1 * (5 - 2) = $2\"\nTotal oranges: x\nTotal bananas: 2x\nAlice's total number of fruits: 5 + x + 2x = 5 + 4x\n\nDouble-check the calculation process, let's analyze its consistency. End with \"yes\" or \"no\" for whether the calculation check passes.\n\nAnswer:\nCalculation check:\nPurpose: Check whether the calculation process is consistent\nRule: Any inconsistent calculation makes the check fails\n\ncalculation1: \nequation: $2* 50%, original answer: $1\n$2 * 50%  = $1\n$1 is consistent with the original answer $1, so the calculation is correct.\n\ncalculation2: \nequation: $1 * (5 - 2), original answer: $2\n(5 - 2)  = 3\n$1 * 3 = $3 is inconsistent with the original answer $2, so the calculation is incorrect.\n\ncalculation3:\nequation: 5 + x + 2x, original answer: 5 + 4x\nx + 2x = 3x\n5 + 3x is inconsistent with the original answer 5 + 4x, so the calculation is incorrect.\n\nResult: Based on the check, the calculation process is inconsistent. So the answer is \"no\", the calculation check fails..\n\n"
]

calculation_few_shot_suffix = "\n\nDouble-check the calculation process, let's analyze its consistency. End with \"yes\" or \"no\" for whether the calculation check passes.\n\nAnswer:\nCalculation check:\nPurpose: Check whether the calculation process is consistent\nRule: Any inconsistent calculation makes the check fails\n"

prompts = {
    "direct_reasoning_fewshot": {"prefix": ordinary_few_shot, "suffix": ""},
    "deductive_reasoning_generation_oneshot_open_cloze": {"prefix": one_shot_natural_program_prompt_generation, "suffix": one_shot_natural_program_prompt_generation_suffix },
    "deductive_reasoning_generation_oneshot_mcq": {"prefix": one_shot_natural_program_prompt_mcq, "suffix": one_shot_natural_program_prompt_mcq_suffix},
    "deductive_reasoning_generation_oneshot_last_letter": {"prefix": one_shot_naturaL_program_prompt_last_letter, "suffix": one_shot_naturaL_program_prompt_last_letter_suffix},
    "deductive_reasoning_generation_fewshot": {"prefix": natural_program_format_few_shot, "suffix": natural_program_format_suffix},
    "verification": {"prefix": verification_few_shot, "suffix": ""},
    "grounding": {"prefix": grounding_few_shot, "suffix": grounding_few_shot_suffix},
    "reasoning": {"prefix": reasoning_few_shot, "suffix": reasoning_few_shot_suffix},
    "calculation": {"prefix": calculation_few_shot, "suffix": calculation_few_shot_suffix}
}

def prompt_fn(question, mode):
    return "\n".join(prompts[mode]["prefix"]) + question + prompts[mode]["suffix"]

# Test case
question = "#1: Giá mỗi quả táo là $1.\n#5: Chi phí cho 5 quả táo là $5 (by #1).\nPlease verify this reasoning process."
print(prompt_fn(question, mode="deductive_reasoning_generation_oneshot_open_cloze"))